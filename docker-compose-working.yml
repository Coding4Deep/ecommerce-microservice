version: '3.8'

services:
  # Infrastructure Services
  mongodb:
    image: mongo:4.4
    container_name: ecommerce-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: ecommerce
    volumes:
      - mongodb_data:/data/db
      - ./data/seed/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ecommerce-network

  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network

  postgresql:
    image: postgres:15-alpine
    container_name: ecommerce-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: payments
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/seed/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ecommerce-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ecommerce-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ecommerce-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - ecommerce-network

  vault:
    image: hashicorp/vault:1.15
    container_name: ecommerce-vault
    restart: unless-stopped
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - ecommerce-network

  # Microservices (Only existing ones)
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: ecommerce-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=myroot
    depends_on:
      - vault
      - redis
    networks:
      - ecommerce-network

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: ecommerce-user-service
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/ecommerce?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379/0
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=myroot
    depends_on:
      - mongodb
      - redis
      - vault
    networks:
      - ecommerce-network

  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: ecommerce-product-service
    restart: unless-stopped
    ports:
      - "8002:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://admin:password123@mongodb:27017/ecommerce?authSource=admin
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - SPRING_REDIS_PASSWORD=redis123
      - VAULT_URI=http://vault:8200
      - VAULT_TOKEN=myroot
    depends_on:
      - mongodb
      - redis
      - vault
    networks:
      - ecommerce-network

  # Frontend Services
  web-frontend:
    build:
      context: ./frontend/web-app
      dockerfile: Dockerfile
    container_name: ecommerce-web-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    depends_on:
      - api-gateway
    networks:
      - ecommerce-network

volumes:
  mongodb_data:
  redis_data:
  postgres_data:

networks:
  ecommerce-network:
    driver: bridge
